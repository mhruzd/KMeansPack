shiny::runApp('inst/shiny_app')
load("~/data_science/homework/TB_6Month copy/.RData")
TB6monthsSE_run1 <- readRDS("~/data_science/homework/TB_6Month copy/TB6monthsSE_run1.rds")
View(TB6monthsSE_run1)
library(ggplot2)
plot_boxplot + +labs(x = "Sample Group Timepoint", y = "Score") theme(
library(ggplot2)
plot_boxplot + labs(x = "Sample Group Timepoint", y = "Score") +
theme(
text = element_text(size = 7),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, hjust = 0.5),
plot.margin = margin(10, 10, 10, 10))
ggsave("boxplot_MH.png", plot = plot_boxplot, width = 10, height = 12, dpi = 300)
print(plot_boxplot)
ggsave("boxplot_MH.png", plot = plot_boxplot, width = 10, height = 12, dpi = 300)
ggsave(
filename = "boxplot_MH2.png",  # Specify the filename
plot = plot_boxplot,              # The plot to save
width = 10,                       # Width in inches
height = 12,                      # Height in inches
dpi = 300                         # Resolution in dots per inch
)
library(ggplot2)
plot_boxplot <- signatureBoxplot(inputData = ssgsea_res, # change object name each time to avoid overwriting
name = "Boxplots of Signatures, ssGSEA",
signatureColNames = names(sample_tbsignatures2),#TBsignatures, sample_tbsignatures
annotationColName = "Timepoint", rotateLabels = FALSE, fill_colors = c("blue","orange", "green"))#,,"blue","orange", "green"))
library(ggplot2)
plot_boxplot + labs(x = "Sample Group Timepoint", y = "Score") +
theme(
text = element_text(size = 7),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, hjust = 0.5),
plot.margin = margin(10, 10, 10, 10))
library(TBSignatureProfiler)
library(ggplot2)
plot_boxplot <- signatureBoxplot(inputData = ssgsea_res, # change object name each time to avoid overwriting
name = "Boxplots of Signatures, ssGSEA",
signatureColNames = names(sample_tbsignatures2),#TBsignatures, sample_tbsignatures
annotationColName = "Timepoint", rotateLabels = FALSE, fill_colors = c("blue","orange", "green"))#,,"blue","orange", "green"))
print(plot_boxplot)
ggsave("~/TBLung/TB_6Month/ssGSEA_signature_boxplot2.png", plot = plot_boxplot, width = 8, height = 6, dpi = 300) # change the name every time to avoid duplicates
library(ggplot2)
plot_boxplot + labs(x = "Sample Group Timepoint", y = "Score") +
theme(
text = element_text(size = 7),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, hjust = 0.5),
plot.margin = margin(10, 10, 10, 10))
ggsave(
filename = "boxplot_MH.png",  # Specify the filename
plot = plot_boxplot,              # The plot to save
width = 10,                       # Width in inches
height = 12,                      # Height in inches
dpi = 300                         # Resolution in dots per inch
)
library(ggplot2)
plot_boxplot2 <- plot_boxplot + labs(x = "Sample Group Timepoint", y = "Score") +
theme(
text = element_text(size = 7),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, hjust = 0.5),
plot.margin = margin(10, 10, 10, 10))
ggsave(
filename = "boxplot_MH.png",  # Specify the filename
plot = plot_boxplot2,              # The plot to save
width = 10,                       # Width in inches
height = 12,                      # Height in inches
dpi = 300                         # Resolution in dots per inch
)
library(tidyverse)
df <- map_df(1:100, function(n) {
s_n_value <- n + n # s_n is the row number plus n
s_n_2_value <- (n)^2 # s_n_2 is n squared
data.frame(n = n,
s_n = s_n_value,
s_n_2 = s_n_2_value)})
print(df)
library(tidyverse)
df <- map_df(1:100, function(n) {
s_n_value <- 1 + n # s_n is the row number plus n
s_n_2_value <- (1 + n)^2 # s_n_2 is n squared
data.frame(n = n,
s_n = s_n_value,
s_n_2 = s_n_2_value)})
print(df)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
# Put a titlePanel here
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
),
# Main panel. put your output plot here
mainPanel(
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
),
# Main panel. put your output plot here
mainPanel(
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
),
# Main panel. put your output plot here
mainPanel(
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
plot(iris[,c("Sepal.Length","Sepal.Width")])
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
plot(iris[,c(input$xcol,input$ycol)])
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
plot(iris[,c("Sepal.Length","Sepal.Width")])
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
plot(iris[,c(input$xcol,input$ycol)])
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
plot(iris[,c("Sepal.Length","Sepal.Width")])
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
plot(iris[,c(input$xcol,input$ycol)])
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
plot(iris[,c(input$xcol,input$ycol)],
col = kmeans(iris[,c(input$xcol,input$ycol)], input$clusters)$cluster)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
plot(iris[,c(input$xcol,input$ycol)],
col = kmeans(iris[,c(input$xcol,input$ycol)], input$clusters)$cluster)
points(kmeans(iris[,c(input$xcol,input$ycol)], input$clusters)$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
clusters <- reactive({
kmeans(iris[,c(input$xcol,input$ycol)], input$clusters)
})
output$plot1 <- renderPlot({
plot(iris[,c(input$xcol,input$ycol)],
col = clusters()$cluster)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Put a titlePanel here
titlePanel("k-means clustering"),
sidebarLayout(
# Sidebar. Put your inputs inside the sidebarPanel
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
# Main panel. put your output plot here
mainPanel(
plotOutput('plot1')
)
)
)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
plot(iris[,c(input$xcol,input$ycol)],
col = kmeans(iris[,c(input$xcol,input$ycol)], input$clusters)$cluster)
points(kmeans(iris[,c(input$xcol,input$ycol)], input$clusters)$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
